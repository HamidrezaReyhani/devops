version: "3.8"

services:
  app:
    build: ./app
    container_name: flask_app
    ports:
      - "5010:5010"
    environment:
      DB_HOST: ${DB_HOST}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      LOGSTASH_HOST: logstash
      LOGSTASH_PORT: 4000
    mem_limit: 512m
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5010/health"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - devops
    depends_on:
      - postgres
      - logstash
    restart: unless-stopped

  postgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    volumes:
      - db_data:/var/lib/postgresql/data
    mem_limit: 512m
    networks:
      - devops
    restart: unless-stopped

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres_exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://${DB_USER}:${DB_PASS}@postgres:5432/${DB_NAME}?sslmode=disable"
    mem_limit: 512m
    networks:
      - devops
    restart: unless-stopped


  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    mem_limit: 512m
    ports:
      - "19090:9090"
    networks:
      - devops
    depends_on:
      - app
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_AUTH_ANONYMOUS_ENABLED=true
    mem_limit: 512m
    depends_on:
      - prometheus
    networks:
      - devops
    restart: unless-stopped

  elasticsearch:
    image: docker.arvancloud.ir/elasticsearch:7.17.21
    container_name: elasticsearch
    environment:
      - ES_JAVA_OPTS=-Xms256m -Xmx256m
      - discovery.type=single-node
#      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}

      # - bootstrap.memory_lock=true
      # - xpack.security.transport.ssl.enabled=true
    mem_limit: 512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - devops
    restart: unless-stopped

  logstash:
    image: docker.arvancloud.ir/logstash:7.17.21
    container_name: logstash
    volumes:
    - ./logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    environment:
      - LS_JAVA_OPTS=-Xms256m -Xmx256m
    mem_limit: 512m
    ports:
      - "5044:5044"
      - "4000:4000"
    networks:
      - devops
    depends_on:
      - elasticsearch
    restart: unless-stopped

  kibana:
    image: docker.arvancloud.ir/kibana:7.17.21
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - NODE_OPTIONS=--max-old-space-size=256
    mem_limit: 512m
    ports:
      - "5601:5601"
    networks:
      - devops
    depends_on:
      - elasticsearch
    restart: unless-stopped

volumes:
  db_data:
  grafana_data:
  es_data:

networks:
  devops:
    driver: bridge
